q
@game
n
params
c
request.headers
request.url
request
c
params
exit
params
params["game"]["state"]
n
c
n
@game
n
params
c
params["game"]
@game
c
n
c
n
@game
n
params
c
@game
c
render json: @game
@game=Game.create(state: params["data"])
params
c
params
@game
c
params
@game
c
@game
c
exit
render plain: @game
exit
render plain: @game.to_json
@game.to_json
c
exit
render json: @game
exit
render json: @data
render json: data
render plain: @data
render plain: JSON.stringify(@data)
c
render plain: JSON.stringify(data)
@game
params["game"]
exit
c
@game.to_json(only: [:id, :state])
@game.to_json
@game
c
@games
n
exit
@game.map{|g| g.to_json}
@game=Game.all
params
c
@game
n
@game
n
params
c
params
c
params
c
params
c
params
c
params.to_json
JSON.parse(params)
params
c
n
@game
params
n
c
Game.new(state: params["game"])
JSON.parse(params)
JSON.parse(params["game"])
game_params
Game.create(params["game"])
params["game"]
params
q
params
c
params
c
params
c
params
c
params
c
params
c
params
c
n
c
@game.state
@game
n
@game
c
@game2.state.each_with_index{|s, i| puts i}
@game2.state.each{|s, i| puts i}
@game2.state.each{|s| puts s}
@game2.state
game2.state
@game2=Game.create(state: Array.new(9, ""))
Game.first
@game
c
game_params
q
params
game_params
game
exit
render json: @game
@game
n
exit
@game.to_json
n
exit
n
Game.new(:state => params[:game])
exit
exception
n
exit
params[:game]
